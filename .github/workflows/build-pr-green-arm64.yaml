name: Build cOS Pull requests-green-arm64
on: 
 pull_request:
   types:
     - labeled
     - synchronize
concurrency:
  group: ci-Pull requests-green-arm64-${{ github.head_ref || github.ref }}-${{ github.repository }}
  cancel-in-progress: true
jobs:
  build-green-arm64:
    runs-on: [self-hosted, arm64]
    if: contains(fromJson('["mudler", "davidcassany", "itxaka", "kkaempf", "cOS-cibot"]'), github.actor) && contains(github.event.pull_request.labels.*.name, 'arm64')
    env:
      LUET_ARCH: arm64
      FLAVOR: green
      ARCH: arm64
      FINAL_REPO: quay.io/costoolkit/releases-green-arm64
      DOWNLOAD_METADATA: false
      PUSH_CACHE: false
      REPO_CACHE: quay.io/costoolkit/build-green-cache-arm64
      # For non x86_64 archs, skip the *-fips build as there are no golang releases in other arches
      SKIP_PACKAGES: "build/golang-fips toolchain-fips/yip toolchain-fips/luet-makeiso toolchain-fips/luet live/syslinux live/systemd-boot live/boot"
    steps:
      - run: |
          sudo rm -rf build || true
          sudo rm -rf bin || true
          sudo rm /usr/bin/luet || true
          sudo rm -Rf /etc/luet/ || true
          sudo rm -Rf /var/tmp/luet || true
          sudo rm -Rf /var/luet || true
      - name: Install Go
        run: |
          curl -L https://golang.org/dl/go1.16.5.linux-arm64.tar.gz -o go1.16.5.linux-arm64.tar.gz
          sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.16.5.linux-arm64.tar.gz
      - name: Install make
        run: |
            sudo apt-get update
            sudo apt-get install -y make
      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow
      - name: Run make deps
        run: |
          sudo -E make deps
          sudo luet install --no-spinner -y toolchain/yq
      - name: Run make validate
        run: |
          sudo -E make validate
      - name: Build packages ðŸ”§
        run: |
          export PATH=$PATH:/usr/local/go/bin
          mkdir build || true
          pushd ./.github
          go build -o build
          popd
          sudo -E ./.github/build
          ls -liah $PWD/build
          sudo chmod -R 777 $PWD/build
      - name: Run make create-repo
        run: |
          sudo -E make create-repo
      - name: Upload results
        uses: actions/upload-artifact@v2
        with:
          name: build-green-arm64
          path: build
          if-no-files-found: error
  iso-squashfs-green:
    runs-on: [self-hosted, arm64]
    needs: build-green-arm64
    env:
      FINAL_REPO: quay.io/costoolkit/releases-green-arm64
      LUET_ARCH: arm64
      FLAVOR: green
      ARCH: arm64
    steps:
      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow
      - name: Download result for build
        uses: actions/download-artifact@v2
        with:
          name: build-green-arm64
          path: build
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y xorriso squashfs-tools
      - name: Run make deps
        run: |
          sudo -E make deps
          sudo luet install --no-spinner -y toolchain/yq
      - name: Export cos version
        run: |
             source .github/helpers.sh
             echo "COS_VERSION=$(cos_version)" >> $GITHUB_ENV
      - name: Build ISO from local build ðŸ”§
        if: github.event_name != 'schedule' && !startsWith(github.ref, 'refs/tags/')
        run: |
          source .github/helpers.sh
          create_remote_manifest manifest.yaml
          sudo -E MAKEISO_ARGS="--output cOS-Seed-green-${{ env.COS_VERSION }}-arm64" MANIFEST=manifest.yaml.remote make local-iso
      - name: Build ISO from remote repositories ðŸ”§
        if: github.event_name == 'schedule' || startsWith(github.ref, 'refs/tags/')
        run: |
          sudo -E YQ=/usr/bin/yq MAKEISO_ARGS="--output cOS-Seed-green-${{ env.COS_VERSION }}-arm64" make iso
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-squashfs-green-arm64.iso.zip
          path: |
            *.iso
            *.sha256
          if-no-files-found: error
  iso-nonsquashfs-green:
    runs-on: [self-hosted, arm64]
    needs: build-green-arm64
    env:
      FINAL_REPO: quay.io/costoolkit/releases-green-arm64
      LUET_ARCH: arm64
      FLAVOR: green
      ARCH: arm64
    steps:
      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow
      - name: Download result for build
        uses: actions/download-artifact@v2
        with:
          name: build-green-arm64
          path: build
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y xorriso squashfs-tools
      - name: Run make deps
        run: |
          sudo -E make deps
          sudo luet install --no-spinner -y toolchain/yq
      - name: Tweak manifest and drop squashfs recovery
        run: |
          source .github/helpers.sh
          drop_recovery manifest.yaml
      - name: Export cos version
        run: |
             source .github/helpers.sh
             echo "COS_VERSION=$(cos_version)" >> $GITHUB_ENV
      - name: Build ISO from local build ðŸ”§
        if: github.event_name != 'schedule' && !startsWith(github.ref, 'refs/tags/')
        run: |
          source .github/helpers.sh
          create_remote_manifest manifest.yaml
          sudo -E MAKEISO_ARGS="--output cOS-Seed-green-${{ env.COS_VERSION }}-arm64" MANIFEST=manifest.yaml.remote make local-iso
      - name: Build ISO from remote repositories ðŸ”§
        if: github.event_name == 'schedule' || startsWith(github.ref, 'refs/tags/')
        run: |
          sudo -E YQ=/usr/bin/yq MAKEISO_ARGS="--output cOS-Seed-green-${{ env.COS_VERSION }}-arm64" make iso
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-nonsquashfs-green-arm64.iso.zip
          path: |
            *.iso
            *.sha256
          if-no-files-found: error
  raw-images-green:
    runs-on: ubuntu-latest
    container: opensuse/leap:15.3
    needs:
    - build-green-arm64
    steps:
      - name: Install OS deps
        run: |
          zypper in -y bc qemu-tools sudo curl e2fsprogs dosfstools mtools squashfs gptfdisk make tar gzip xz which
      - uses: actions/checkout@v2
      - name: Download result for build
        uses: actions/download-artifact@v2
        with:
          name: build-green-arm64
          path: build
      - name: Install toolchain
        run: |
          # Since some time /var/lock is a symlink to /run/lock, which doesn't exit in the continer
          rm -rf /var/lock
          mkdir -p /var/lock
      - name: Run make deps
        run: |
          sudo -E make deps
          sudo luet install --no-spinner -y toolchain/yq
      - name: Export cos version
        run: |
             source .github/helpers.sh
             echo "COS_VERSION=$(cos_version)" >> $GITHUB_ENV
      - name: Run make raw_disk
        run: |
          sudo -E make raw_disk
      - name: Run make azure_disk
        run: |
          sudo -E make azure_disk
      - name: Run make gce_disk
        run: |
          sudo -E make gce_disk
      - name: Rename images
        run: |
          mv disk.raw cOS-Vanilla-RAW-green-${{ env.COS_VERSION }}-arm64.raw
          mv disk.vhd cOS-Vanilla-AZURE-green-${{ env.COS_VERSION }}-arm64.vhd
          mv disk.raw.tar.gz cOS-Vanilla-GCE-green-${{ env.COS_VERSION }}-arm64.tar.gz
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Vanilla-RAW-green-${{ env.COS_VERSION }}-arm64
          path: |
            cOS-Vanilla-RAW-green-${{ env.COS_VERSION }}-arm64.raw
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Vanilla-AZURE-green-${{ env.COS_VERSION }}-arm64
          path: |
            cOS-Vanilla-AZURE-green-${{ env.COS_VERSION }}-arm64.vhd
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Vanilla-GCE-green-${{ env.COS_VERSION }}-arm64
          path: |
            cOS-Vanilla-GCE-green-${{ env.COS_VERSION }}-arm64.tar.gz
          if-no-files-found: error
